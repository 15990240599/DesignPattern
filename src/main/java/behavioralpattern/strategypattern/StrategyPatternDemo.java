package behavioralpattern.strategypattern;

/**
 * 策略模式（StrategyPattern）
 * 又称为政策模式（PolicyPattern），它是将定义的算法家族，分别封装起来，让他们之间可以
 * 相互替换，从而让算法的变化不会影响到使用算法的用户。属于行为型模式
 * 策略模式使用的就是面向对象的继承和多态机制，从而实现同一行为在不同场景下具备不同实现
 *
 * 策略模式使用场景
 * 策略模式可以解决在有多种算法相似的情况下，使用is...else或switch...case所带来的
 * 复杂性和臃肿性。在日常开发中，策略模式适用于一下场景：
 * 1、针对同一类型问题，有多种处理方法，每一种都能独立解决问题；
 * 2、算法需要自由切换的场景
 * 3、需要屏蔽算法规则的场景
 *
 * 策略模式主要包含三种角色
 * 上下文角色（Context）：用来操作策略的上下文环境，屏蔽高层模块（客户端）对策略、算法
 * 的直接访问，封装可能存在的变化
 * 抽象策略角色（Strategy）：规定策略或算法的行为
 * 具体策略角色（ConcreteStrategy）：具体的策略或算法实现
 *
 * 策略模式优缺点：
 * 优点：
 * 1、策略模式符合开闭原则
 * 2、避免使用多重条件转义语法，如if..else语句、switch语句
 * 3、使用策略模式可以提高算法的保密性和安全性
 * 缺点：
 * 1、客户端必须知道所有的策略，并且自行决定使用哪一个策略类
 * 2、代码中会产生非常多的策略类，增加维护难度
 */
public class StrategyPatternDemo {
}
