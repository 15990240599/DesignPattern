package behavioralpattern.observerpattern;

/**
 * 观察者模式（ObserverPattern）,又叫发布-订阅（Publish/Subscribe）模式、模型-视图
 * （Model/View）模式、源-监听器(Source/Listener)模式或从属者（Dependents）模式。
 * 定义一种一对多的依赖关系，一个主题对象可被多个观察者对象同时监听，使得每当主题对象状态
 * 变化时，所有依赖于它的对象都会得到通知并被自动更新。属于行为型模式。
 * 观察者模式的核心时将观察者与被观察者解耦，以类似于消息/广播发送的机制联动两者，时被
 * 观察者能通知道感兴趣的观察者们，从而做出相应的响应
 *
 * 应用场景
 * 在软件系统中，当系统一方行为依赖于另一方行为的变动时，可使用观察者模式松耦合联动双方，
 * 使得一方的变动可以通知道感兴趣的另一方对象，从而让另一方对象对此做出响应。
 * 1、当一个抽象模型包含两个方面内容，其中一个方面依赖于另一个方面
 * 2、其他一个或多个对象的变化依赖于另一个对象的变化
 * 3、实现类似广播机制的功能，无需知道具体收听者，只需分发广播，系统中感兴趣的对象会自动
 * 接受该广播；
 * 4、多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知
 *
 * 主要包含三种角色
 * 抽象主题（Subject）：指被观察的对象（Observable）。该角色时一个抽象类或接口，
 * 定义了增加、删除、通知观察者对象的方法；
 * 具体主题（ConcreteSubject）：具体被观察者，当其内部状态变化时，会通知已注册的观察者
 * 抽象观察者（Observer）:定义了响应通知的更新方法
 * 具体观察者（ConcreteObserver）:在得到状态更新时，会自动做出响应
 */
public class ObserverPatternDemo {
}
